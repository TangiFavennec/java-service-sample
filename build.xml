<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="java-service-sample" default="build"
         xsi:schemaLocation="antlib:org.apache.ivy.ant"
         basedir=".">


    <property file="build.properties"/>

    <!-- *** Properties *** -->

    <!-- Project Directories-->


    <property name="dist.dir" value="dist"/>
    <property name="dist.lib.dir" location="dist/lib"/>

    <property name="lib.dir" value="lib"/>

    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="bin.app.dir" value="${bin.dir}/app"/>
    <property name="bin.test.dir" value="${bin.dir}/test"/>

    <!-- Compiler  -->
    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.all.args" value="-encoding UTF-8 -source 11 -target 11 ${compiler.args}"/>
    <property name="compiler.max.memory" value="700m"/>
    <patternset id="ignored.files">
        <exclude name="**/*~/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.git/**"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.class"/>
    </patternset>

    <!-- Modules -->


    <!-- Module java-service-sample -->

    <path id="classpath">
        <fileset dir="${basedir}/">
            <include name="lib/*.jar" />
            <exclude name="lib/*sources.jar"/>
            <exclude name="lib/*javadoc.jar"/>
        </fileset>
    </path>

    <!-- constructs the external libraries classpath name -->
    <pathconvert property="classpath.name" pathsep=" ">
        <path refid="classpath" />
        <mapper>
            <chainedmapper>
                <flattenmapper />
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </mapper>
    </pathconvert>

    <path id="java-service-sample.module.production.classpath">
        <path refid="classpath"/>
    </path>

    <path id="java-service-sample.module.classpath">
        <path refid="classpath"/>
        <pathelement location="${bin.app.dir}"/>
    </path>

    <patternset id="excluded.files.from.compilation">
        <patternset refid="ignored.files"/>
    </patternset>

    <path id="java-service-sample.module.sourcepath">
        <dirset dir="${basedir}">
            <include name="src/app/java"/>
            <include name="src/app/resources"/>
        </dirset>
    </path>

    <path id="java-service-sample.module.test.sourcepath">
        <dirset dir="${basedir}">
            <include name="src/test/java"/>
            <include name="src/test/resources"/>
        </dirset>
    </path>


    <target name="compile.all"
            depends="compile.production, compile.tests"
            description="Compile module java-service-sample"/>

    <target name="compile.production"
            description="Compile module java-service-sample; production classes">
        <mkdir dir="${bin.app.dir}"/>
        <javac  destdir="${bin.app.dir}"
                debug="${compiler.debug}"
                includeantruntime="false"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}"
                fork="true"
                compiler="javac10+">
            <compilerarg line="${compiler.all.args}"/>
            <classpath refid="java-service-sample.module.production.classpath"/>
            <src refid="java-service-sample.module.sourcepath"/>
            <patternset refid="excluded.files.from.compilation"/>
        </javac>

        <copy todir="${bin.app.dir}">
            <fileset dir="${basedir}/src/app/java">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
            <fileset dir="${basedir}/src/app/resources">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.tests"
            depends="compile.production"
            description="compile module java-service-sample; test classes"
            unless="skip.tests">
        <mkdir dir="${bin.test.dir}"/>
        <javac destdir="${bin.test.dir}"
               debug="${compiler.debug}"
               includeantruntime="false"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}"
               fork="true"
               compiler="javac10+">
            <compilerarg line="${compiler.all.args}"/>
            <classpath refid="java-service-sample.module.classpath"/>
            <src refid="java-service-sample.module.test.sourcepath"/>
            <patternset refid="excluded.files.from.compilation"/>
        </javac>

        <copy todir="${bin.test.dir}">
            <fileset dir="${basedir}/src/test/java">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
            <fileset dir="${basedir}/src/test/resources">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="init">
        <ivy:settings file="./config/ivysettings.xml"/>
        <mkdir dir="dist"/>
    </target>

    <!-- Ivy Tasks -->

    <target name="retrieve" depends="init" description="--> retrieve dependencies with Ivy">
        <ivy:retrieve/>
    </target>

    <target name="load.dependencies.IntelliJ" description="Generate POM">
        <fail message="Unset property: project.version" unless="sample.service.version"/>

        <!--
                <delete file="${basedir}/pom.xml"/>
        -->

        <ivy:resolve file="${basedir}/ivy.xml" conf="default, test"/>
        <ivy:deliver deliverpattern="${basedir}/ivy.xml"
                     pubrevision="${sample.service.version}"
                     status="release"/>

        <!--
                <ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${basedir}/pom.xml"/>
        -->
        <!--TODO: Have Intellij import all dependencies without pom-->
    </target>

    <target name="idea" depends="init, retrieve, load.dependencies.IntelliJ"/>

    <!-- Artifact generation -->

    <target name="copy-dependencies">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.lib.dir}"/>
        <copy todir="${dist.lib.dir}">
            <fileset dir="lib" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
        </copy>
    </target>

    <target name="build-jar" depends="build, copy-dependencies">

        <echo message="classpath.name : ${classpath.name} " />

        <jar destfile="${dist.dir}/${project.name}.jar"
             whenmanifestonly="fail"
             strict="fail">
            <fileset dir="${bin.app.dir}" includes="**"/>
            <!--
                        <zipfileset dir="" excludes="META-INF/**/*" includes="${build.basedir}/lib/*.jar"/>
            -->
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Implementation-Title" value="${project.name}"/>
                <attribute name="Implementation-Vendor" value="hftn"/>
                <attribute name="Implementation-Version" value="1.0"/>
                <attribute name = "Main-Class" value = "jp.hftn.service.sample.Service"/>
                <attribute name = "Class-Path" value = "${classpath.name}"/>
            </manifest>
        </jar>
    </target>

    <!-- Clean targets -->

    <target name="clean-bin" description="cleanup module">
        <delete dir="${bin.app.dir}"/>
        <delete dir="${bin.test.dir}"/>
    </target>

    <target name="clean-lib" description="cleanup lib jars">
        <delete>
            <fileset dir="${basedir}/lib">
                <include name="*"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-dist">
        <delete dir="dist"/>
    </target>

    <target name="clean-ivy" description="cleanup app target files">
        <ivy:cleancache description="clean ivy cache"/>
    </target>

    <target name="clean" depends="clean-bin" description="cleanup app target files"/>

    <target name="clean-all" depends="clean-ivy, clean-lib, clean-dist, clean" description="clean all"/>

    <target name="build" depends="init, clean, compile.all"
            description="build binaries"/>
</project>